// This is an autogenerated file from running `firebase genkit:flow`.
'use server';

/**
 * @fileOverview This file defines a Genkit flow that suggests projects to students based on their profiles using AI.
 *
 * @exports suggestProjects - An async function that takes a student profile and a list of projects and returns a list of suggested projects with a match score.
 * @exports SuggestProjectsInput - The input type for the suggestProjects function.
 * @exports SuggestProjectsOutput - The output type for the suggestProjects function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const StudentProfileSchema = z.object({
  name: z.string().describe('The name of the student.'),
  email: z.string().email().describe('The email address of the student.'),
  college: z.string().describe('The college the student attends.'),
  bio: z.string().describe('A brief biography of the student.'),
  skills: z.array(z.string()).describe('A list of the student\'s skills.'),
});

const ProjectSchema = z.object({
  id: z.string().describe('The unique identifier of the project.'),
  title: z.string().describe('The title of the project.'),
  description: z.string().describe('A detailed description of the project.'),
  deadline: z.string().describe('The deadline for the project.'),
  reward: z.string().describe('The reward for completing the project.'),
  requirements: z.array(z.string()).describe('The requirements for the project.')
});

const SuggestProjectsInputSchema = z.object({
  studentProfile: StudentProfileSchema.describe('The profile of the student.'),
  projects: z.array(ProjectSchema).describe('A list of projects to evaluate.'),
});

export type SuggestProjectsInput = z.infer<typeof SuggestProjectsInputSchema>;

const SuggestedProjectSchema = z.object({
  project: ProjectSchema,
  matchScore: z.number().describe('A score indicating how well the project matches the student, from 0 to 1.'),
  justification: z.string().describe('Explanation of why the project is a good fit for the student.')
});

const SuggestProjectsOutputSchema = z.array(SuggestedProjectSchema);

export type SuggestProjectsOutput = z.infer<typeof SuggestProjectsOutputSchema>;

export async function suggestProjects(input: SuggestProjectsInput): Promise<SuggestProjectsOutput> {
  return suggestProjectsFlow(input);
}

const suggestProjectsPrompt = ai.definePrompt({
  name: 'suggestProjectsPrompt',
  input: {schema: SuggestProjectsInputSchema},
  output: {schema: SuggestProjectsOutputSchema},
  prompt: `You are an AI assistant designed to suggest projects to students based on their profiles.

  For each project, evaluate how well the project requirements align with the student's skills and bio.
  Assign a match score from 0 to 1, where 1 indicates a perfect match.
  Provide a justification for each project suggestion.

  Student Profile:
  Name: {{{studentProfile.name}}}
  Email: {{{studentProfile.email}}}
  College: {{{studentProfile.college}}}
  Bio: {{{studentProfile.bio}}}
  Skills: {{#each studentProfile.skills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

  Projects:
  {{#each projects}}
  Project ID: {{{this.id}}}
  Title: {{{this.title}}}
  Description: {{{this.description}}}
  Deadline: {{{this.deadline}}}
  Reward: {{{this.reward}}}
  Requirements: {{#each this.requirements}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

  {{/each}}

  Consider these safety guidelines:
  - Do not make any suggestions that are harmful, unethical, or illegal.
  - Ensure suggestions align with the student's skills and interests as described in their profile.
  - Provide diverse suggestions that cover a range of project types and requirements.
  - The match score MUST be between 0 and 1.
  - Always populate the justification field.

  Output the suggested projects in the following JSON format:
  {{#each projects}}
  {
    "project": {
       "id": "{{{this.id}}}",
      "title": "{{{this.title}}}",
      "description": "{{{this.description}}}",
      "deadline": "{{{this.deadline}}}",
      "reward": "{{{this.reward}}}",
    },
    "matchScore": 0.8,
    "justification": "This project aligns well with your skills and interests."
  }
  {{/each}}
  `,
});

const suggestProjectsFlow = ai.defineFlow(
  {
    name: 'suggestProjectsFlow',
    inputSchema: SuggestProjectsInputSchema,
    outputSchema: SuggestProjectsOutputSchema,
  },
  async input => {
    const {output} = await suggestProjectsPrompt(input);
    return output!;
  }
);
